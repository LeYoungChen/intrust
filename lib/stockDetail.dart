import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:intrust/Stock.dart';
import 'package:intrust/widgets/k_chart.dart';

class StockDetail extends StatefulWidget {
  final Stock stock;

  StockDetail({
    Key key,
    @required this.stock
  }) : super (key: key);

  @override
  _StockDetailState createState() => _StockDetailState();
}

class _StockDetailState extends State<StockDetail> with TickerProviderStateMixin {

  List movingAvg5 = [
    23.37, 23.61,23.92,24.26,24.64,24.96,25.08,25.07,25.08,25.08,25.27,25.44,25.53,25.55,
    25.68,25.7,25.86,26.13,26.39,26.57,26.7,26.66,26.57,26.5,26.31,26.39,26.75,
    27.23,27.71,28.33,28.76,28.92,28.84,28.37,27.97,27.47,26.97,26.57,26.7,26.57,
    26.42,26.22,26.23,26.08,26.17,26.32,26.55,26.8,27.27,27.8,28.37,28.86,29.48,
    30.32,30.9,31.17,31.51,31.52,31.39,31.33,31.64,31.9,32.43,33.32,34.3,34.91,
    35.63,36.08,35.93,35.78,36.01,36.17,36.45,36.65,36.9,36.72,36.64,36.37,35.95,
    35.63,36.03,36.35,36.81,37.49,38.1,38.26,38.96,39.53,40.16,40.54,41.08,41.1,
    41.14,41.25,41.38,41.27,41.37,41.33,41.32,41.57,42.02,42.66,43.6,44.02,44.13,
    44.47,44.88,45.81,47.21,48.99,50.25,51.08,51.18,51.12,50.58,50.28,49.96,49.94,
    49.82,49.8,49.69,49.75,49.34,48.72,48.43,48.13,47.7,47.67,47.83,47.99,47.66,
    47.69,47.61,47.27,46.7,46.9,46.5,46.17,46.25,46.1,45.82,45.62,45.39,45.51,
    45.25,44.5,44.16,43.82,43.46,43.82,44.76,45.48,46.06,46.13,46.09,46.11,45.12,
    44.04,42.93,42.1,41.05,41.13,41.16,41.11,41.22,41.9,42.09,42.5,43.2,43.45,
    43.1,43.27,43.4,43.48,43.55,43.25,42.24,41.29,40.5,39.69,39.54,39.97,39.95,
    39.76,39.58,38.41,36.59,34.75,32.54,30.06,27.81,26.57,25.53,25.34,26.0,
    27.56,28.55,29.87,30.77,31.24,31.51,32.29,33.11,33.66,34.15,34.34,34.38,
    34.24,34.38,34.62,35.25,35.41,35.65,35.78,35.79,35.77,35.92,36.29,37.21,
    38.02,38.51,39.07,39.76,40.08,40.78,41.81,42.78,42.97,43.06,42.23,41.24,
    40.25,40.12,39.64,39.9,40.07,40.43,40.59,41.07,41.68,42.29,42.91,43.41,43.86];

  List movingAvg20 = [23.3175, 23.335, 23.425, 23.51, 23.58, 23.6475, 23.7075, 23.775, 23.8775, 23.9675, 24.08, 24.22, 24.3275, 24.465, 24.6625, 24.825, 24.9975, 25.1625, 25.32, 25.4925, 25.6575, 25.76, 25.825, 25.88, 25.91, 26.015, 26.1775, 26.365, 26.5375, 26.7225, 26.8875, 27.0475, 27.1925, 27.2425, 27.295, 27.33, 27.325, 27.3025, 27.32, 27.295, 27.26, 27.215, 27.2175, 27.215, 27.26, 27.2425, 27.165, 27.11, 27.105, 27.1275, 27.145, 27.15, 27.27, 27.5925, 27.86, 28.07, 28.285, 28.5075, 28.765, 29.05, 29.375, 29.705, 30.0575, 30.575, 31.0825, 31.5225, 31.975, 32.3775, 32.74, 33.0775, 33.4325, 33.8025, 34.12, 34.3225, 34.5775, 34.82, 35.085, 35.3325, 35.4625, 35.6525, 35.9175, 36.1975, 36.4275, 36.505, 36.6025, 36.755, 37.03, 37.29, 37.5625, 37.7925, 38.0225, 38.2625, 38.4625, 38.7125, 38.9125, 39.16, 39.445, 39.7025, 40.055, 40.3975, 40.6575, 41.0225, 41.4, 41.6875, 41.905, 42.21, 42.5025, 42.97, 43.45, 44.0175, 44.5025, 44.9975, 45.48, 45.9175, 46.3175, 46.755, 47.145, 47.6325, 48.0425, 48.375, 48.6725, 48.9175, 49.0675, 49.2175, 49.45, 49.5875, 49.6225, 49.5325, 49.3725, 49.2, 48.94, 48.775, 48.64, 48.41, 48.23, 48.095, 47.91, 47.6975, 47.5175, 47.305, 47.1275, 46.8775, 46.71, 46.715, 46.51, 46.22, 45.9925, 45.7475, 45.6225, 45.4675, 45.495, 45.44, 45.36, 45.3375, 45.315, 45.2975, 45.095, 44.8275, 44.5075, 44.315, 44.105, 43.9725, 43.77, 43.4075, 43.3075, 43.455, 43.455, 43.44, 43.3425, 43.215, 43.04, 42.9025, 42.775, 42.68, 42.58, 42.325, 42.1825, 42.0875, 42.0725, 41.9775, 41.9475, 41.8925, 41.785, 41.735, 41.5675, 41.075, 40.5175, 39.8475, 39.07, 38.22, 37.2525, 36.3425, 35.38, 34.535, 33.8325, 33.33, 32.92, 32.525, 32.1025, 31.72, 31.3225, 31.0, 30.815, 30.5775, 30.3625, 30.305, 30.4475, 30.6875, 31.0375, 31.5025, 32.165, 32.6575, 33.2175, 33.6475, 33.95, 34.2175, 34.5, 34.8225, 35.2575, 35.645, 35.9675, 36.195, 36.485, 36.8625, 37.3025, 37.835, 38.295, 38.6675, 39.0325, 39.205, 39.3325, 39.505, 39.785, 39.9975, 40.2325, 40.4075, 40.6325, 40.86, 40.9625, 41.1475, 41.3525, 41.5925, 41.7725, 41.9075];

  List movingAvg60 = [24.4, 24.4325, 24.4775, 24.5392, 24.5983, 24.6458, 24.6892, 24.7308, 24.775, 24.825, 24.8908, 24.9592, 25.0025, 25.0467, 25.085, 25.0975, 25.1008, 25.1017, 25.095, 25.1025, 25.0992, 25.0925, 25.07, 25.0525, 25.0175, 25.0108, 25.0308, 25.0517, 25.0617, 25.0867, 25.1433, 25.1917, 25.2333, 25.2408, 25.2658, 25.2833, 25.2958, 25.3242, 25.3608, 25.3842, 25.4117, 25.4367, 25.4892, 25.535, 25.5833, 25.635, 25.6833, 25.75, 25.84, 25.9392, 26.0375, 26.1392, 26.2633, 26.4333, 26.6058, 26.7417, 26.8692, 26.9908, 27.135, 27.2792, 27.4308, 27.56, 27.7, 27.89, 28.0842, 28.26, 28.4392, 28.6175, 28.7942, 28.9758, 29.155, 29.3333, 29.5275, 29.7192, 29.9108, 30.0733, 30.2317, 30.3808, 30.5158, 30.6658, 30.8508, 31.0392, 31.2342, 31.4317, 31.6483, 31.84, 32.0567, 32.2592, 32.4692, 32.6658, 32.8667, 33.0717, 33.2842, 33.5425, 33.7833, 34.0167, 34.2717, 34.5142, 34.7608, 35.0333, 35.3167, 35.6417, 35.9617, 36.2558, 36.53, 36.8292, 37.1692, 37.5458, 37.9175, 38.2958, 38.6525, 39.0208, 39.3542, 39.6508, 39.9358, 40.245, 40.5583, 40.8892, 41.1867, 41.475, 41.7492, 42.0458, 42.2983, 42.47, 42.6525, 42.8508, 43.0517, 43.2642, 43.4617, 43.67, 43.8217, 44.0117, 44.1942, 44.3467, 44.4867, 44.67, 44.8333, 45.0108, 45.205, 45.3592, 45.4858, 45.6058, 45.7258, 45.8733, 45.955, 46.0058, 46.0392, 46.0833, 46.1483, 46.2283, 46.3125, 46.4042, 46.4933, 46.555, 46.6208, 46.7158, 46.7167, 46.7192, 46.6892, 46.665, 46.635, 46.5892, 46.5158, 46.4467, 46.4225, 46.4208, 46.3567, 46.24, 46.1125, 45.9608, 45.825, 45.7058, 45.5917, 45.4758, 45.375, 45.2392, 45.0625, 44.8708, 44.6992, 44.5325, 44.3933, 44.2475, 44.0883, 43.9525, 43.795, 43.5833, 43.3217, 43.0117, 42.6783, 42.3008, 41.9292, 41.5617, 41.1717, 40.8508, 40.5758, 40.3175, 40.0658, 39.8133, 39.5608, 39.3375, 39.125, 38.955, 38.79, 38.5733, 38.4125, 38.2783, 38.14, 37.9917, 37.8167, 37.6458, 37.4858, 37.3008, 37.1242, 36.9542, 36.7875, 36.6242, 36.5342, 36.4783, 36.4775, 36.4475, 36.4125, 36.3625, 36.3617, 36.3917, 36.4108, 36.405, 36.42, 36.4008, 36.38, 36.3092, 36.25, 36.1683, 36.1275, 36.06, 36.005, 35.985, 36.0175, 36.0692, 36.1075, 36.1708, 36.2142, 36.2625, 36.3575, 36.4492];

  List dShares = [3190234, 12102578, 18703570, 16053243, 13608938, 38764390, 7562806, 3465972, 11308243, 8456201, 31077999, 6782104, 7470434, 4583440, 16581977, 27723753, 28190894, 12362961, 9648900, 7372415, 6033970, 6770910, 8466804, 9497961, 10172901, 36011086, 36237054, 38750964, 21975493, 28608129, 76202683, 28666529, 71097091, 89427080, 36669449, 17477955, 10495634, 16383714, 20964157, 14332572, 20418513, 10826385, 17071209, 10845362, 14244087, 8144325, 10341735, 34135316, 72562510, 103506659, 47959769, 40824985, 60522212, 134374563, 54282192, 46455399, 30793913, 24299721, 63982149, 91916506, 25426385, 29081754, 40575082, 130239766, 127940064, 86932392, 39394700, 37805162, 34999362, 40419186, 35850656, 39849284, 23866220, 32471586, 46757310, 45047973, 22368075, 26450392, 35946384, 31337640, 54223806, 37727449, 34248465, 40902248, 63726232, 38247639, 73416673, 32329865, 30266285, 20805623, 38976781, 12241281, 30457140, 24909147, 20906821, 34717821, 30806771, 23261995, 47481008, 50951108, 32285643, 49226442, 32695245, 30990038, 20932812, 26349981, 103581867, 93503419, 58448746, 53117451, 37548778, 25116363, 27106590, 23694117, 19845496, 22630261, 13932252, 19823116, 15594296, 13103050, 12359884, 27605324, 25694093, 30466230, 14783842, 18781246, 20258623, 13509198, 13243762, 22242651, 38864042, 37109528, 17598358, 31246571, 18376839, 12726524, 13864850, 12728303, 15131009, 22584788, 11321475, 14974876, 7871472, 37667899, 66258006, 40662500, 40443866, 23020868, 46077670, 21426372, 23459648, 18117965, 18863122, 16702403, 9084278, 9744308, 21147575, 22105363, 24649505, 21947741, 14712475, 13396430, 8711253, 25095742, 15519623, 38585511, 22195417, 14409756, 10930602, 11102158, 8221169, 19868832, 9028613, 6076428, 8358882, 20600514, 25135726, 16509383, 17360648, 11877583, 21683114, 18492479, 26318603, 25610891, 26847249, 30957382, 30388043, 26637814, 30183669, 34696866, 27075139, 47941035, 19363381, 23393147, 33908444, 52693677, 50607348, 32391878, 36689474, 28400165, 30856563, 54826711, 37783307, 43421331, 24700407, 21027951, 40109851, 37651985, 23385517, 49086119, 42558512, 60269808, 28305137, 35076704, 32398151, 27562340, 25029901, 55826064, 63244865, 32556389, 28103611, 18420314, 39872828, 32430111, 47553176, 48489846, 29574542, 45673024, 45488630, 52581909, 40607901, 25165201, 44030064, 30697478, 26054660, 29246381, 29402500, 64183273, 23727329, 33127698, 41188127, 31380116, 36814842, 24560394];

  List wShares = [12102578, 7562806, 6782104, 28190894, 6770910, 36237054, 28666529, 10495634, 10826385, 8144325, 47959769, 46455399, 25426385, 86932392, 40419186, 46757310, 40902248, 73416673, 12241281, 30806771, 49226442, 103581867, 25116363, 13932252, 27605324, 20258623, 37109528, 13864850, 14974876, 40662500, 23459648, 9744308, 24649505, 25095742, 10930602, 6076428, 16509383, 26318603, 26637814, 19363381, 32391878, 30856563, 21027951, 42558512, 27562340, 32556389, 47553176, 52581909, 26054660, 33127698];

  List mShares = [28190894, 14332572, 25426385, 31337640, 32285643, 27605324, 37667899, 24649505, 16509383, 28400165, 32556389, 33127698];

  // fixme: ask Chuni, what to do with the mvAvg lines in week k-chart and month k-chart
  // fixme: wStockPrices and mSrockPrices need to be updated, currently taking the data for that date
  // fixme: wShares and mShares also need to be updated to be the sum of shares within that time range (also check with Chuni whether this is the right column LOL, shouldn't it be volume?)

  String selectedKChartRange = 'd';

  @override
  Widget build(BuildContext context) {

    Map<String, Widget> kCharts = <String, Widget>{
      'd': KChart(
        historicPrices: widget.stock.historicPrice,
        ma_5: movingAvg5,
        ma_20: movingAvg20,
        ma_60: movingAvg60,
        shares: dShares,
      ),
      'w': KChart(
        historicPrices: widget.stock.historicPrice,
        ma_5: [],
        ma_20: [],
        ma_60: [],
        shares: wShares,
      ),
      'm': KChart(
        historicPrices: widget.stock.historicPrice,
        ma_5: [],
        ma_20: [],
        ma_60: [],
        shares: mShares,
      )
    };

    return Scaffold(
      resizeToAvoidBottomPadding: false, 
      appBar: AppBar(
        backgroundColor: Color.fromRGBO(238, 239, 242, 1.0),
        leading: IconButton(
          icon: Icon(Icons.arrow_back_ios),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        elevation: 0,
        title: Text(widget.stock.name + " (" + widget.stock.idNumber + ")"),
      ),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Container(
          constraints: BoxConstraints(
            maxHeight: double.infinity,
            maxWidth: double.infinity,
          ),
          child: SingleChildScrollView(
            child: Column(
              children: <Widget>[
                // fixme: use Stack and Positioned to overlap the segmented control and the KChart
                // https://stackoverflow.com/questions/49838021/how-do-i-stack-widgets-overlapping-each-other-in-flutter
                // https://api.flutter.dev/flutter/widgets/Stack-class.html
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 5, vertical: 20),
                  alignment: Alignment.centerLeft,
                  child: CupertinoSlidingSegmentedControl(
                    groupValue: selectedKChartRange,
                    children: {
                      'd': Text(' D '),
                      'w': Text(' W '),
                      'm': Text(' M '),
                    },
                    onValueChanged: (value) {
                      setState(() {
                        selectedKChartRange = value;
                      });
                    },
                  )
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 20, vertical: 25),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      Container(
                        alignment: Alignment.bottomCenter,
                        height: 300,
                        width: double.infinity,
                        child: kCharts[selectedKChartRange]
                      ),
                    ],
                  )),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
